// src-tauri/Cargo.toml
[package]
name = "ghostview-tauri"
version = "0.1.0"
edition = "2021"

[dependencies]
tauri = { version = "1", features = ["api-all"] }
serde = { version = "1", features = ["derive"] }
serde_json = "1"
reqwest = "0.11"

// src-tauri/src/main.rs
#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

use tauri::Manager;
use std::process::Command;
use serde::Serialize;
use reqwest;

#[derive(Serialize)]
struct PackageInfo {
    name: String,
    repo: String,
    desc: String,
}

#[tauri::command]
async fn search_aur(query: String) -> Vec<PackageInfo> {
    let url = format!("https://aur.archlinux.org/rpc/?v=5&type=search&arg={}", query);
    let resp = reqwest::get(&url).await;
    let mut pkgs = vec![];
    if let Ok(r) = resp {
        if let Ok(json) = r.json::<serde_json::Value>().await {
            if let Some(results) = json["results"].as_array() {
                for pkg in results {
                    pkgs.push(PackageInfo {
                        name: pkg["Name"].as_str().unwrap_or("").to_string(),
                        repo: "AUR".to_string(),
                        desc: pkg["Description"].as_str().unwrap_or("").to_string(),
                    });
                }
            }
        }
    }
    pkgs
}

#[tauri::command]
fn list_packages() -> Vec<PackageInfo> {
    // Use pacman to list available packages
    let output = Command::new("pacman")
        .args(["-Slq"])
        .output();
    let mut pkgs = vec![];
    if let Ok(out) = output {
        let stdout = String::from_utf8_lossy(&out.stdout);
        for line in stdout.lines() {
            pkgs.push(PackageInfo {
                name: line.to_string(),
                repo: if line.contains("chaotic") { "ChaoticAUR".to_string() } else { "core".to_string() },
                desc: "Arch/ChaoticAUR package (desc stub)".to_string(),
            });
        }
    }
    // TODO: Add AUR fetching here (stub for now)
    pkgs.push(PackageInfo {
        name: "yay".to_string(),
        repo: "AUR".to_string(),
        desc: "AUR helper (stub)".to_string(),
    });
    pkgs.push(PackageInfo {
        name: "chaotic-mirrorlist".to_string(),
        repo: "ChaoticAUR".to_string(),
        desc: "Chaotic AUR package (stub)".to_string(),
    });
    pkgs
}

#[tauri::command]
fn install_package(pkg: String) -> String {
    // Call ghostbrew CLI for installation
    let output = Command::new("ghostbrew")
        .args(["install", &pkg])
        .output();
    match output {
        Ok(out) => String::from_utf8_lossy(&out.stdout).to_string(),
        Err(e) => format!("Failed to run ghostbrew: {}", e),
    }
}

fn main() {
    tauri::Builder::default()
        .invoke_handler(tauri::generate_handler![list_packages, install_package, search_aur])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}